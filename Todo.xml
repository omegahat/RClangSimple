<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="Admin/XSL/Todo.xsl" ?> 

<topics xmlns:r="http://www.r-project.org">
<title>RCIndex Package</title>


<topic>
<title>General</title>
<items>
<item>
 But not from cur$kind.
The name is missing from getCursorKind(). 
See RHydrus/clang.R
<r:code>
getCursorKind(getChildren(r[[1]]@def)[[1]])
</r:code>
</item>


<item status="done">
Use <r:expr>getResultType(getType(cur))</r:expr> rather than use <r:expr>getType(cur)</r:expr>.
<br/>
Why does getName() for the return type for a C++ method 
include the () and has a type kind  of FunctionProto  111 ??
<br/>
Funny output from C++ methods?
<programlisting><![CDATA[
doc@methods$getPageRotate
[1] "int (int) getPageRotate (int page)"
]]></programlisting>
See Rpoppler/fun.R and getPageRotate().
3> 
</item>

<item>
Allow the caller to specify the code directly, not in a file, and then
read from that. There is no mechanism for this in the clang API so we'll write 
to a temporary file and then go.
Allow mult-line code as a vector.
But make certain to keep open the possibility of compiling multiple files into an Index
so don't treat all multi-line input as code.  need an I() or asText = TRUE.
</item>

<item>
Add the namespace to the enums we identify etc.
Recognize a using namespace and append this to each declaration.
Do this in the collectors.
</item>

<item>
Make the filename handling consistent across the primary, end-user functions,
e.g. getRoutines,  -  avoid creating the objects until the very last minute.
<br/>
 [done] getCppClasses,  getEnums, getDataStructures, getGlobalVariables, findGlobals, getTypedefs, findCalls,  getVariables, getMacros, , getDefines
<br/>
fix genFunctionCollector
<br/>
Add documentation to fileFilter.
</item>

<item status="done">
getDataStructures - why are we seeing definitions twice.
<br/>
don't descend through the children of these definitions.
</item>

<item status="done">
<r:func>getDataStructures</r:func> returns enums, etc. 
and all as  StructDefinition.
<br/>
Removed the enums so just structs and unions and  typedefs
</item>

<item status="check">
S4 class for structure description. And change code in inst/generateCode.
Make  things consistent.
</item>


<item status="done">
Merge getInclusions and getIncludes and their documentation.
</item>

<item status="done">
<r:func>getIncludes</r:func> - implement recursive to preserve the structure.
</item>

<item status="done">
Get the preprocessor cursors - includes, macros, ...
<br/>
Use the option <r:var>RCIndex:::CXTranslationUnit_DetailedPreprocessingRecord</r:var>
as a value in options for <r:func>createTU</r:func>.
<br/>
See http://clang-developers.42468.n3.nabble.com/libclang-3-5-C-interface-cannot-get-to-macro-definitions-expansions-with-cursors-td4048861.html
</item>


<item>
export and test findGlobals
Don't find constants, e.g. enum types. See FALSE in R source code. 
See inst/explorations/rglobals/ and r$tryDispatch.
Separate out the routines, like codetools.
</item>

<item status="done">
memory management for CXType's. See tests/refCountType.R
It will segfault.
Problem is getVariables() wasn't calling clone.
Change clone to TRUE by default.
</item>
<item>
Make our collectors clone their objects 
and turn cloning off. Set the default for the
high-level functions to be clone = !missing(collector) to
ensure that cloning happens if the caller specifies a collector.
</item>

<item>
Make the collectors return an S4Visitor object.
Consider what happens when we have multiple TUs.
</item>

<item>
Clean up the Module_ functions, i.e. get rid of Module_ and connect to methods, e.g. getName.
</item>
<item>
Multiple TUs in an index and cross referencing.
Need to run the indexer.
</item>
<item status="extend">
call-graph function
Extend to handle multiple TUs
</item>

<item>
Allow caller to provide mutiple files or multiple translation units
and process them together.
createTU can return them all using a single index.
Don't seem to be able to get translation units from an index, i.e. query an index for how many and specific TUs.
</item>

<item status="check">
S4 class for FunctionDecl. Extend NativeElement.
Will  break the code in generateCode and CUDA/TU/nativeGen.R
<br/>
Code in generateCode/ and RCUDA/TU/ is now changed and seems to work.
</item>



<item>
Generate documentation programmatically.
Can get from comments.
Also, see RCUDA TU/docs.R
</item>

<item status="check">
Finish off Reference classes for collectors.
<br/>implement collectors as ReferenceClasses
And recognize an S4 class also.
<br/>
visitTU() now handles these.
</item>

<item>
function to reparse a TU.
</item>

<item>
Allow us to set our own types that mimic the libclang types, i.e. classes
that have the same methods.
This would allow us to change the parameters and return types in routines,
e.g. set the returnType on a FunctionDecl, e.g. isConstQualifiedType
</item>


<item>
Make the structs and data types more accessible with 
R-like operators on fields to get, e.g. line numbers, etc.
</item>



<item>
Show how to read C code and find references to global variables
in the bodies of routines.
Does clang allow us to resolve the variable there and then,
i.e. find the actual CXCursor for the global variable.
<br/>
<r:code>
parseTU("inst/exampleCode/globalUse.c")
</r:code>
shows cursors of kind DeclRefExpr.
So let's explore those:
<r:code>

</r:code>
getCursorReferenced(),   getCursorUSR ?
</item>


<item>
Pointer types in routines that require us to create one explicitly
getFileUniqueID
</item>

<item>
Speed of, e.g., getFunctions, slowed down by match and S4 classes.
match may be from filtering file names.
<r:output><![CDATA[
                     self.time self.pct total.time total.pct
"match"                   1.74     9.36       6.26     33.69
".identC"                 1.48     7.97       1.50      8.07
".getClassFromCache"      1.42     7.64       1.42      7.64
"possibleExtends"         1.00     5.38       2.48     13.35
"is"                      0.86     4.63       4.00     21.53
".Call"                   0.68     3.66      18.48     99.46
]]></r:output>
</item>

<item>
Allow post-processing the return value from the .Call(), e.g. 
getFileTime() and make it a POSIXct.  (See cuda.R example.)
Want to do it programmatically.
</item>

<item>
Differentiate between data types for structures
and their corresponding  types.
</item>

<item>
Implement interface to add/combine  TUs  for different files.
This should be already there.
We create an index and then reuse that.
</item>

<item>
Function to combine collectors so that they all get called in a single
call.
</item>

<item>
Recognize an enum as a parameter. 
Seems to have a Kind that is Unexposed!
But there is a CXType_Enum
</item>

<item>
In the routine to copy a struct, copy the contents of the elements too.
</item>

<item>
change getRReference() call in native.R to one that checks the class
of the object. So add the class name in the call.
</item>

<item>
Get details of a FunctionProto.
See tests/fnPointer.R
</item>

<item status="check">
Get the native dereferencing of CXTranslationUnit correct.
e.g.
<r:code>
z = makeCode(r[["clang_Module_getTopLevelHeader"]], typeMap = typeMap, cat = TRUE)
</r:code>
Need to have *
</item>

<item>
Borrow the CRoutine and RFunction classes from RGCCTU and code for pretty printing
code.
Currently source()'ing the code from ~/GitWorkingArea/RGCCTranslationUnit/R/codeObjects.R
That's all we need. 
Have to figure out how to synchronize the two versions.
</item>

<item>
Add bindings for the different relevant methods
</item>



<item>
Add features that are in RGCCTU for code generation.
.copy, options to se finalizers when we create instances or return them, 
accessors for struct fields, 
</item>

<item>
Add finalizers to the types CXType, CXCursor, etc.
and garbage collect them properly.
</item>

<item>
generate code for enum classes.
See REnum.R in inst/generateCode/
</item>

<item>
Turn on USE_S4_ENUMS in src/Makevars.in
</item>

<item>
getType function 
<br/>
Just as(x, "CXType")
</item>

<item status="no">
Fill in the other routines of the API using RGCCTU.
Resolve the existing code with the CXTypePtr, etc.
Either tell RGCCTU what name to use, or change the existing code!
<br/>
We have enough of libclang to generate these using libclang and RCIndex.
</item>


<item>
Getting the name of a type doesn't seem to be working anymore.
See tests/fib.R.
Is this  just for basic types?
<r:code>
 getTypeKind(fib$returnType) == CXType_Int
</r:code>
</item>

<item>
Add finalizers, e.g. disposeTranslationUnit
Have to worry about holding elements belonging to it, e.g. cursors.
</item>

<item>
If we can't create the TU, get an error message.
The -Xclang doesn't work anymore.
</item>

<item status="check">
Enumeration values when not default.
</item>

<item status="high">
Getting C++ routines, classes, etc.
What doesn't work?
</item>

<item status="low">
Precompiled headers
</item>

<item status="low">
CodeCompletion
</item>

<item>
Index actions
</item>

<item status="done">
Function to read a header file. Ideally w/o writing a .c file.
<br/>
libclang can do this w/o our intervention.
</item>

<item status="done">
If the visitor function  doesn't return an integer, do it for them.
Can try to coerce, but probably not a great idea.
</item>




<item status="done">
Put the names of the enumeration types in <r:func>genEnumCollector</r:func>.
Make the enum type a formal class. Check if it is now?
Detect the typedefs. How do we find the parent?
Can get the type in the enum def and then use its getName() method.
</item>

<item status="done">
Generate code for clang_getInclusions.
Function pointer and data.
</item>



<item status="done">
Why aren't we seeing comment nodes.
<br/>
Only see the doxygen comments by default.
If we want all the comments, use the argument "-fparse-all-comments" when creating the TU.
Then the comments appear, not as their own cursor kind, but attched to certain cursors.
(Found this by grepping for Comment in the clang/docs/ directory in llvm-devel.
</item>

<item status="done">
Cursors seem to be being freed or else getName() is broken on the cursors
but works in the  visitor.  I wasn't cloning them!
findGlobals
</item>

<item status="done">
Explanation: not cloning the cursors.
aborting in visitor. See explorations/protect.R
Could it be anything to do with the cursors and not copying them deeply?
No, it has to do with releasing the TU.
Can we get the TU from a CXCursor? If so, could use an external
table to keep references counts.
Reading the source code ~/llvm-devel/tools/clang/tools/libclang/,
it appears we can get this information from the data, in data[2].

<r:output><![CDATA[
 visitTU(as(r$R_foobar_ctr$def, "CXCursor"), a$update)
Decl that isn't part of DeclNodes.inc!
UNREACHABLE executed at /Users/duncan/llvm-devel/tools/clang/tools/libclang/../../include/clang/AST/DeclVisitor.h:45!
Abort
]]></r:output>
</item>

<item status="done">
set options on an index setGlobalOptions()
Bitwise value.
</item>

<item status="done">
Already Done:   getStructDef()
<br/>
Get the information about a struct, i.e. its fields - names and types.
getOffsetOf(). But how do we get the  names.
Are we supposed to capture these when traversing the TU.
Similarly for FunctionProto?
We can do this with a call to clang_visitChildren().
visitChildren(cursor, simpleVisitor)
</item>

<item status="done">
Fix up the getCString()'s that don't have a dispose.
[Done] Make a routine for this? Already existed CXStringToSEXP().
</item>

<item status="done">
CXIndex_setGlobalOptions - define bitwise enum and change
the code to do the coercion.
</item>
</items>

</topic>

</topics>

